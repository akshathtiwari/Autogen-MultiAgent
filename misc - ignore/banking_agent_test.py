import os
from dotenv import load_dotenv
import asyncio
import json


from autogen_core import RoutedAgent, message_handler, MessageContext, SingleThreadedAgentRuntime, AgentId
from autogen_core.models import SystemMessage, UserMessage

from autogen_ext.models.openai import OpenAIChatCompletionClient

from dataclasses import dataclass

load_dotenv()

API_KEY = os.environ.get("OPENAI_API_KEY")

# Dataclass is used to store data in structured classes
@dataclass
class MessageType():
    content: str

class RouterAgent(RoutedAgent):
    def __init__(self, domain_agent_type:str) -> None:
        super().__init__("RouterAgent")
        # self._domain_classifier = AgentId(domain_agent_type, self.id.key)
        self.domain_agent_id = AgentId(domain_agent_type, self.id.key)
        
    @message_handler
    async def handle_message(self, message: MessageType, ctx: MessageContext) -> None:
        print(f"{self.id.type} received message: {message.content}")
        await self.send_message(MessageType(content="Need help with obtaining loan"), self.domain_agent_id)
        
class DomainClassifierAgent(RoutedAgent):
    def __init__(self) -> None:
        super().__init__("DomainClassifierAgent")
        self.model_client = OpenAIChatCompletionClient(model="gpt-4o-mini", api_key=API_KEY)
        # self.runtime = runtime
        
        
    @message_handler
    async def handle_message(self, message: MessageType, ctx: MessageContext) ->None:
        print(f"Query: '{message.content}' received by Domain Classifier Agent")
        prompt = (
            "You are an expert banking domain classifier. Your task is to determine which "
            "banking domain is most relevant for the following query. The available domains "
            "and their corresponding agent names are:\n\n"
            "1. Retail Banking Agent: RetailBankingAgent\n"
            "2. Corporate & Business Banking Agent: CorporateBusinessBankingAgent\n"
            "3. Investment Banking Agent: InvestmentBankingAgent\n"
            "4. Wealth Mgmt & Private Banking Agent: WealthManagementAgent\n"
            "5. Risk Management & Compliance Agent: RiskManagementAgent\n"
            "6. Insurance & Bancassurance Agent: InsuranceAgent\n"
            "7. IT-Ops Agent: ITOpsAgent\n"
            "8. Payments & Settlement Systems Agent: PaymentsAgent\n"
            "9. Capital & Treasury Operations Agent: CapitalTreasuryAgent\n"
            "10. Analytics & Business Intelligence Agent: AnalyticsAgent\n\n"
            f"User Query: \"{message.content}\"\n\n"
            "Respond with a valid JSON object that contains exactly one key 'agent_name' whose "
            "value is one of the agent names listed above. For example: {\"agent_name\": \"RetailBankingAgent\"}"
        )
        resp = await self.model_client.create(messages=[SystemMessage(content=prompt)], json_output=True)
        print(f"Response generated by Domain Classifier LLM: {resp.content}") 
        # resp_json = json.loads(resp)
        print(type(str(resp))) 
        resp_json = json.loads(str(resp.content))
        # print(resp_json)
        # print(str(resp.content))
        classification = resp_json['agent_name']
        print(classification)
             
        

async def main():
    runtime = SingleThreadedAgentRuntime()    
    await DomainClassifierAgent.register(runtime, "domain_agent", lambda:DomainClassifierAgent())    
    await RouterAgent.register(runtime, "router_agent", lambda:RouterAgent("domain_agent"))
    
    runtime.start()
    await runtime.send_message(MessageType(content="Need help with obtaining loan"), AgentId("router_agent", "default"))
    await runtime.stop_when_idle()
    
if __name__ == "__main__":
    asyncio.run(main())
    
